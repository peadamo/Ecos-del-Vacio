[gd_resource type="Shader" format=3 uid="uid://cqebtyegpn16x"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_noise : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;

uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;



uniform sampler2D tex_frg_2 : hint_normal;
uniform float amplitude = 2;
uniform float wave_frecuency = 3;
uniform float wave_speed = 1;





void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv).rgb;
	vec3 emission_tex_noise = texture(texture_noise, base_uv).rgb;
	
	// Emission Operator: Add
	
	
	
	
	
	
	
	// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);


// FloatParameter:19
	float n_out19p0 = amplitude;


// FloatParameter:16
	float n_out16p0 = wave_frecuency;


	vec2 n_out4p0;
// UVPolarCoord:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 1.00000;
	float n_in4p3 = 1.00000;
	{
		vec2 __dir = UV - n_in4p1;
		float __radius = length(__dir) * 2.0;
		float __angle = atan(__dir.y, __dir.x) * 1.0 / (PI * 2.0);
		n_out4p0 = vec2(__radius * n_in4p2, __angle * n_in4p3);
	}


// Vector2Constant:13
	vec2 n_out13p0 = vec2(0.000000, 0.000000);


// Distance:12
	float n_out12p0 = distance(n_out4p0, n_out13p0);


// FloatOp:17
	float n_out17p0 = n_out16p0 * n_out12p0;


// Input:5
	float n_out5p0 = TIME;


// FloatParameter:14
	float n_out14p0 = wave_speed;


// FloatOp:15
	float n_out15p0 = n_out5p0 * n_out14p0;


// FloatOp:18
	float n_out18p0 = n_out17p0 - n_out15p0;


// FloatFunc:11
	float n_out11p0 = sin(n_out18p0);


// FloatOp:20
	float n_out20p0 = n_out19p0 * n_out11p0;


// VectorCompose:10
	vec3 n_out10p0 = vec3(n_out20p0, n_out20p0, n_out20p0);


// VectorOp:8
	vec3 n_out8p0 = vec3(n_out2p0.xyz) + n_out10p0;


// Output:0
	NORMAL_MAP = n_out8p0;
	
	
	
	EMISSION = (emission.rgb + emission_tex*emission_tex_noise) * emission_energy*n_out8p0.r;

	
	
}
"
